import sys
import numpy as np
import tensorflow as tf
import keras
from keras.layers import Input, Dense, Dropout, Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.pooling import MaxPooling2D
from keras.models import Model, Sequential
from keras.callbacks import ModelCheckpoint, TensorBoard
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import np_utils
from sklearn.cluster import KMeans
from tensorflow.python.platform import app
from utils_cifar10 import data_cifar10_from_dir

def build_model(weights_file=None):
    inputs = Input(
        shape=(32, 32, 3,),
        name='input')

    conv1 = Conv2D(
        32, (3, 3),
        padding='same',
        activation='relu',
        name='conv1')(inputs)

    conv2 = Conv2D(
        32, (3, 3),
        padding='valid',
        activation='relu',
        name='conv2')(conv1)

    pool1 = MaxPooling2D(
        pool_size=(3, 3,),
        strides=(2, 2,),
        padding='same',
        name='pool1')(conv2)

    drop1 = Dropout(0.25)(pool1)

    conv3 = Conv2D(
        64, (3, 3),
        padding='same',
        activation='relu',
        name='conv3')(drop1)

    conv4 = Conv2D(
        64, (3, 3),
        padding='valid',
        activation='relu',
        name='conv4')(conv3)

    pool2 = MaxPooling2D(
        pool_size=(3, 3,),
        strides=(2, 2,),
        padding='same',
        name='pool2')(conv4)

    drop2 = Dropout(0.25)(pool2)

    fcl1 = Dense(
        512,
        activation='relu',
        name='fc1')(Flatten()(drop2))

    drop3 = Dropout(0.5)(fcl1)

    preds = Dense(
        10,
        activation='softmax',
        name='preds')(drop3)

    model = Model(inputs=inputs, outputs=preds)

    if weights_file is not None:
        model.load_weights(weights_file)

    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy'])

    return model


def load_dataset():
    nb_classes = 10

    (X_train, y_train), (X_test, y_test) = cifar10.load_data()

    X_train = X_train.astype('float32')
    X_test  = X_test.astype('float32')
    X_train /= 255
    X_test  /= 255

    Y_train = keras.utils.to_categorical(y_train, nb_classes)
    Y_test  = keras.utils.to_categorical(y_test, nb_classes)

    return (X_train, Y_train), (X_test, Y_test)


def train(model, batch_size=32, nb_epoch=100, model_file='my_cifarnet.h5', data_augmentation=True, compressed_data_path = None):
    
    if not compressed_data_path:
        (X, Y), (X_test, Y_test) = load_dataset()
    else:
        X, Y = data_cifar10_from_dir(compressed_data_path, filetype='jpg')
    
    n = X.shape[0]
    X_train, Y_train = X[:int(0.8 * n)], Y[:int(0.8 * n)]
    X_test, Y_test = X[int(0.8 * n):], Y[int(0.8 * n):]

    checkpointer = ModelCheckpoint(model_file, verbose=1, save_best_only=True)
    # tensorboard = TensorBoard(log_dir = './logs', histogram_freq=10, write_graph = True, write_images = False)

    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(
            X_train, Y_train,
            batch_size=batch_size,
            epochs=nb_epoch,
            validation_data=(X_test, Y_test),
            shuffle=True,
            callbacks=[checkpointer])
    else:
        print('Using real-time data augmentation.')
        # This will do preprocessing and realtime data augmentation:
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False)  # randomly flip images

        # Compute quantities required for featurewise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(X_train)

        # Fit the model on the batches generated by datagen.flow().
        model.fit_generator(
            datagen.flow(X_train, Y_train, batch_size=batch_size),
            int(X_train.shape[0] / batch_size),
            epochs=nb_epoch,
            validation_data=(X_test, Y_test),
            callbacks=[checkpointer])

    
def get_activation(model, layer_name, input_tensor):
    activation = Model(
        input=model.input,
        output=model.get_layer(layer_name).output) \
    .predict(input_tensor)

    return activation


def save_vectorized_activations_for_conv_layer(activation_tensor, filename_prefix='filter', folder_path='data/'):
    batch_size, w, h, num_filters = activation_tensor.shape

    activations_vectorized = activation_tensor.reshape(batch_size, -1, num_filters)

    for i in range(num_filters):
        np.savetxt(
            folder_path+filename_prefix+str(i + 1)+".txt",
            activations_vectorized[:, :, i])

def save_activations_for_fc_layer(activation_tensor, filename='fc1.txt'):
    np.savetxt('data/'+filename,activation_tensor)

def load_filter_activations(filename):
    return np.loadtxt(filename)


def get_cluster_predictor_for_filter_activations(filter_activations):
    kmeans = KMeans(n_clusters=10)
    kmeans.fit(filter_activations)

    return kmeans

def main(argv=None):

    try:
        target_model_filename = argv[1]

        if len(argv) > 2:
            base_model_filename = argv[2]
            compressed_data_path = argv[3]
            model = build_model(weights_file=base_model_filename)
            train(model, nb_epoch=400, model_file=target_model_filename, compressed_data_path=compressed_data_path)
        else:
            model = build_model()
            train(model, nb_epoch=400, model_file=target_model_filename)

    except IndexError:
        print("Usage: python my_cifarnet_keras.py target_model_filename [base_model_filename compressed_data_path]")
        sys.exit(1)
    

if __name__ == '__main__':
    app.run()